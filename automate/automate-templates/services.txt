package services

import (
	"{{project_name}}/api/repository"
	"{{project_name}}/models"
	"{{project_name}}/url_query"

)

// {{uc_resource}}Service struct
type {{uc_resource}}Service struct {
	repository repository.{{uc_resource}}Repository
}

// New{{uc_resource}}Service creates a new {{uc_resource}}Service
func New{{uc_resource}}Service(repository repository.{{uc_resource}}Repository) {{uc_resource}}Service {
	return {{uc_resource}}Service{
		repository: repository,
	}
}

// Create{{uc_resource}} call to create the {{uc_resource}}
func (c {{uc_resource}}Service) Create{{uc_resource}}({{lc_resource}} models.{{uc_resource}}) (models.{{uc_resource}}, error) {
	return c.repository.Create({{lc_resource}})
}

// GetAll{{uc_resource}} call to create the {{uc_resource}}
func (c {{uc_resource}}Service) GetAll{{uc_resource}}(pagination utils.Pagination) ([]models.{{uc_resource}}, int64, error) {
	return c.repository.GetAll{{uc_resource}}(pagination)
}

// GetOne{{uc_resource}} Get One {{uc_resource}} By Id
func (c {{uc_resource}}Service) GetOne{{uc_resource}}(ID int64) (models.{{uc_resource}}, error) {
	return c.repository.GetOne{{uc_resource}}(ID)
}

// UpdateOne{{uc_resource}} Update One {{uc_resource}} By Id
func (c {{uc_resource}}Service) UpdateOne{{uc_resource}}({{lc_resource}} models.{{uc_resource}}) error {
	return c.repository.UpdateOne{{uc_resource}}({{lc_resource}})
}

// DeleteOne{{uc_resource}} Delete One {{uc_resource}} By Id
func (c {{uc_resource}}Service) DeleteOne{{uc_resource}}(ID int64) error {
	return c.repository.DeleteOne{{uc_resource}}(ID)

}
