version: 2.1
# this is general circleCI implementation.
# This file might need some changes after setting up project for functional CICD
jobs:
  build:
    docker:
      - image: circleci/golang:1.16

      - image: circleci/mysql:8.0-ram
        environment:
          MYSQL_ROOT_PASSWORD: p@$$w0rd
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: p@$$w0rd

    parallelism: 1
    working_directory: /go/src/github.com/readytowork-org/boilerplate-api

    steps:
      - checkout

      - run:
          name: Initialize the environment variable file
          command: |
            echo "ENVIRONMENT=local
            DB_HOST=localhost
            DB_PORT=3306
            DB_NAME=test_db
            DB_USERNAME=user
            DB_PASSWORD=p@$$w0rd
            MAIL_CLIENT_ID=$MAIL_CLIENT_ID
            MAIL_CLIENT_SECRET=$MAIL_CLIENT_SECRET
            MailRefreshToken=$MailRefreshToken
            STORAGE_BUCKET_NAME=$STORAGE_BUCKET_NAME
            SENTRY_DSN=$SENTRY_DSN " > .env

      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}

      - run:
          name: Waiting for MYSQL to be ready
          command: |
            for i in `seq 1 30`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1

      - run:
          name: Initialize firebase service account key file
          command: |
            echo "{
              \"type\": \"$TYPE_FB_SERVICE_ACCOUNT_KEY\", 
              \"project_id\": \"$PROJECT_ID_FB_SERVICE_ACCOUNT_KEY\", 
              \"private_key_id\": \"$PRIVATE_KEY_ID_FB_SERVICE_ACCOUNT_KEY\",
              \"private_key\": \"$PRIVATE_KEY_FB_SERVICE_ACCOUNT_KEY\",
              \"client_email\": \"$CLIENT_EMAIL_FB_SERVICE_ACCOUNT_KEY\",
              \"client_id\": \"$CLIENT_ID_FB_SERVICE_ACCOUNT_KEY\",
              \"auth_uri\": \"$AUTH_URL_FB_SERVICE_ACCOUNT_KEY\",
              \"token_uri\": \"$TOKEN_URI_FB_SERVICE_ACCOUNT_KEY\",
              \"auth_provider_x509_cert_url\": \"$AUTH_PROVIDER_X509_CERT_URL_FB_SERVICE_ACCOUNT_KEY\",
              \"client_x509_cert_url\": \"$CLIENT_X509_CERT_URL_FB_SERVICE_ACCOUNT_KEY\"
            }" > serviceAccountKey.json

      - run:
          name: Build repo
          command: |
            go build main.go

      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "go/pkg/mod"

      - run:
          name: Start the service
          command: ./main
          background: true

      - run:
          name: Validate if the service is working or not.
          command: |
            sleep 5
            curl http://localhost:8080/health-check

      - slack/status:
          channel: ${SLACK_CHANNEL}
          webhook: ${SLACK_WEBHOOK}
          failure_message: ":red_circle: A $CIRCLE_JOB job has failed!"

      - slack/notify-on-failure:
          only_for_branches: main

  sonar:
    working_directory: /go/src/github.com/readytowork-org/boilerplate-api
    docker:
      - image: circleci/golang:1.17
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo

      - sonarcloud/scan:
          sonar_token_variable_name: SONAR_TOKEN

  deploy_to_develop:
    docker:
      - image: google/cloud-sdk

    steps:
      - checkout

      - run:
          name: Append GAR beta settings app yml
          command: |
            echo -e "beta_settings:\n  cloud_sql_instances: $DB_HOST" >> app.yml

      - run:
          name: Initialize the environment variable file
          command: |
            echo "ENVIRONMENT=$ENVIRONMENT
            DB_HOST=$DB_HOST
            DB_PORT=$DB_PORT
            DB_NAME=$DB_NAME
            DB_USERNAME=$DB_USERNAME
            DB_PASSWORD=$DB_PASSWORD
            MAIL_CLIENT_ID=$MAIL_CLIENT_ID
            MAIL_CLIENT_SECRET=$MAIL_CLIENT_SECRET
            MailRefreshToken=$MailRefreshToken
            STORAGE_BUCKET_NAME=$STORAGE_BUCKET_NAME
            SENTRY_DSN=$SENTRY_DSN " > .env

      - run:
          name: Initialize firebase service account key file
          command: |
            echo "{
              \"type\": \"$TYPE_FB_SERVICE_ACCOUNT_KEY\", 
              \"project_id\": \"$PROJECT_ID_FB_SERVICE_ACCOUNT_KEY\", 
              \"private_key_id\": \"$PRIVATE_KEY_ID_FB_SERVICE_ACCOUNT_KEY\",
              \"private_key\": \"$PRIVATE_KEY_FB_SERVICE_ACCOUNT_KEY\",
              \"client_email\": \"$CLIENT_EMAIL_FB_SERVICE_ACCOUNT_KEY\",
              \"client_id\": \"$CLIENT_ID_FB_SERVICE_ACCOUNT_KEY\",
              \"auth_uri\": \"$AUTH_URL_FB_SERVICE_ACCOUNT_KEY\",
              \"token_uri\": \"$TOKEN_URI_FB_SERVICE_ACCOUNT_KEY\",
              \"auth_provider_x509_cert_url\": \"$AUTH_PROVIDER_X509_CERT_URL_FB_SERVICE_ACCOUNT_KEY\",
              \"client_x509_cert_url\": \"$CLIENT_X509_CERT_URL_FB_SERVICE_ACCOUNT_KEY\"
            }" > serviceAccountKey.json

      - run:
          name: Authenticating and configuring the Google Cloud Platform
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GCLOUD_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GCLOUD_ZONE}

      - deploy:
          name: Deploy to Google App Engine
          command: |
            gcloud app deploy app.yaml --project $GCLOUD_PROJECT_ID  --quiet

      - deploy:
          name: Deploy CRON to Google App Engine Cloud Scheduler
          command: |
            gcloud app deploy cron.yaml --quiet

      - run:
          name: Delete Old versions of App Engine
          command: |
            versions=$(gcloud app versions list \
              --service default \
              --sort-by '~VERSION.ID' \
              --format 'value(VERSION.ID)' | sed 1,5d)
            for version in $versions; do
              gcloud app versions delete "$version" \
                --service default \
                --quiet
            done

      - slack/status:
          channel: ${SLACK_CHANNEL}
          webhook: ${SLACK_WEBHOOK}
          failure_message: ":red_circle: A $CIRCLE_JOB job has failed!"

      - slack/notify-on-failure:
          only_for_branches: main

  deploy_to_production:
    docker:
      - image: google/cloud-sdk

    steps:
      - checkout

      - run:
          name: Append GAR beta settings app yml
          command: |
            echo -e "beta_settings:\n  cloud_sql_instances: $DB_HOST" >> app.yml

      - run:
          name: Initialize the environment variable file
          command: |
            echo "ENVIRONMENT=$ENVIRONMENT
            DB_HOST=$DB_HOST
            DB_PORT=$DB_PORT
            DB_NAME=$DB_NAME
            DB_USERNAME=$DB_USERNAME
            DB_PASSWORD=$DB_PASSWORD
            MAIL_CLIENT_ID=$MAIL_CLIENT_ID
            MAIL_CLIENT_SECRET=$MAIL_CLIENT_SECRET
            MailRefreshToken=$MailRefreshToken
            STORAGE_BUCKET_NAME=$STORAGE_BUCKET_NAME
            SENTRY_DSN=$SENTRY_DSN " > .env

      - run:
          name: Initialize firebase service account key file
          command: |
            echo "{
               \"type\": \"$TYPE_FB_SERVICE_ACCOUNT_KEY\", 
               \"project_id\": \"$PROJECT_ID_FB_SERVICE_ACCOUNT_KEY\", 
               \"private_key_id\": \"$PRIVATE_KEY_ID_FB_SERVICE_ACCOUNT_KEY\",
               \"private_key\": \"$PRIVATE_KEY_FB_SERVICE_ACCOUNT_KEY\",
               \"client_email\": \"$CLIENT_EMAIL_FB_SERVICE_ACCOUNT_KEY\",
               \"client_id\": \"$CLIENT_ID_FB_SERVICE_ACCOUNT_KEY\",
               \"auth_uri\": \"$AUTH_URL_FB_SERVICE_ACCOUNT_KEY\",
               \"token_uri\": \"$TOKEN_URI_FB_SERVICE_ACCOUNT_KEY\",
               \"auth_provider_x509_cert_url\": \"$AUTH_PROVIDER_X509_CERT_URL_FB_SERVICE_ACCOUNT_KEY\",
               \"client_x509_cert_url\": \"$CLIENT_X509_CERT_URL_FB_SERVICE_ACCOUNT_KEY\"
             }" > serviceAccountKey.json

      - run:
          name: Authenticating and configuring the Google Cloud Platform
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GCLOUD_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GCLOUD_ZONE}

      - deploy:
          name: Deploy to Google App Engine
          command: |
            gcloud app deploy app.yml --project $GCLOUD_PROJECT_ID --quiet

      - deploy:
          name: Deploy CRON to Google App Engine Cloud Scheduler
          command: |
            gcloud app deploy cron.yaml --quiet

      - slack/status:
          channel: ${SLACK_CHANNEL}
          webhook: ${SLACK_WEBHOOK}
          failure_message: ":red_circle: A $CIRCLE_JOB job has failed!"

      - slack/notify-on-failure:
          only_for_branches: main

orbs:
  slack: circleci/slack@3.4.2

workflows:
  version: 2
  workflow:
    jobs:
      - build:
          context: boilerplate_dev
          filters:
            branches:
              only:
                - develop
                - main
                - sonarqube
      - sonar:
          requires:
            - build

      - deploy_to_develop:
          context: boilerplate_dev
          filters:
            branches:
              only:
                - develop
          requires:
            - build

      - deploy_to_production:
          context: boilerplate_production
          filters:
            tags:
              only:
                - /v[0-9].*/
            branches:
              ignore:
                - /.*/
